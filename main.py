# main.py ‚Äî Telegram‚Äë–±–æ—Ç‚Äë—Å–∫–ª–∞–¥ v0.9.4
"""Telegram‚Äë–±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Å–∫–ª–∞–¥–∞ (SQLite¬†+¬†OpenAI).

v0.9.4
======
* ‚ú® –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —á–∏—Ç–∞–µ–º—ã–µ –ª–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ tx_log (–∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —É LLM).
* ü™µ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /logs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
* ‚ö°Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î (–æ–¥–Ω–æ –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).
* üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π.
* üîí¬†Anti‚ÄëDROP / Anti‚Äëmass‚ÄëDELETE –∑–∞—â–∏—Ç–∞ –≤ validate_sql().
* ‚ûñ¬†–ù–µ–ª—å–∑—è —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å: –ø—Ä–∞–≤–∏–ª–æ 2‚Äëb –≤ SYSTEM_PROMPT_SQL.
* ¬´–ù–µ—Ç —Ä–∞–∑–º–µ—Ä–∞¬ª –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ ¬´-¬ª.
"""

from __future__ import annotations

import os, re, json, logging, asyncio, csv, io, httpx
from typing import List, Dict, Any

import aiosqlite
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand
from openai import AsyncOpenAI, OpenAIError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv(".env")
BOT_TOKEN  = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
DB_PATH    = os.getenv("DATABASE_PATH", "warehouse_v4.db")
MODEL      = os.getenv("OPENAI_MODEL_NAME", "gpt-4o-mini")
LOG_LEVEL  = os.getenv("LOG_LEVEL", "INFO").upper()
PROXY = os.getenv("PROXY")

logging.basicConfig(level=LOG_LEVEL,
                    format="%(asctime)s - %(levelname)s - %(message)s")
if not BOT_TOKEN or not OPENAI_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å BOT_TOKEN –∏ OPENAI_API_KEY –≤ .env")

ai = AsyncOpenAI(
    api_key=OPENAI_KEY,
    http_client=httpx.AsyncClient(
        proxy=PROXY,
    )
)

bot    = Bot(token=BOT_TOKEN)
router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ALLOWED_SIZES = ("XS","S","M","L","XL","XXL","XXXL")
LOCATION_ROWS = "–ê–ë–í–ì–î–ï"
LOCATION_COLS = list(range(1, 11))

SCHEMA = f"""
PRAGMA foreign_keys = ON;
CREATE TABLE IF NOT EXISTS items (
  id   INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT  COLLATE NOCASE NOT NULL,
  size TEXT  COLLATE NOCASE CHECK(size IS NULL OR size IN {ALLOWED_SIZES}),
  UNIQUE(name, size)
);
CREATE TABLE IF NOT EXISTS locations (
  code TEXT COLLATE NOCASE PRIMARY KEY
);
CREATE TABLE IF NOT EXISTS stock (
  item_id       INTEGER,
  location_code TEXT COLLATE NOCASE,
  qty           INTEGER CHECK(qty > 0),
  PRIMARY KEY(item_id, location_code),
  FOREIGN KEY(item_id)       REFERENCES items(id)       ON DELETE CASCADE,
  FOREIGN KEY(location_code) REFERENCES locations(code) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS tx_log (
  id       INTEGER PRIMARY KEY AUTOINCREMENT,
  ts       DATETIME DEFAULT CURRENT_TIMESTAMP,
  user     TEXT,
  sql_text TEXT,
  summary  TEXT,
  success  INTEGER
);
"""

async def init_db(db: aiosqlite.Connection) -> None:
    await db.executescript(SCHEMA)
    locs = [(f"{r}{c}",) for r in LOCATION_ROWS for c in LOCATION_COLS]
    await db.executemany("INSERT OR IGNORE INTO locations(code) VALUES (?)", locs)
    await db.commit()
    logging.info("–ë–î '%s' –≥–æ—Ç–æ–≤–∞.", DB_PATH)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (‚≠ê –ò–ó–ú–ï–ù–ï–ù–û)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SYSTEM_PROMPT_SQL = f"""
–¢—ã ‚Äî SQL‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∫–ª–∞–¥–∞. –°—Ö–µ–º–∞: items(id,name,size), locations(code),
stock(item_id,location_code,qty).

–ü—Ä–∞–≤–∏–ª–∞:
1. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ**:
   ‚Ä¢ `INSERT OR IGNORE INTO items(name,size) VALUES ‚Ä¶`
   ‚Ä¢ `INSERT INTO stock(item_id,location_code,qty) VALUES ‚Ä¶
      ON CONFLICT(item_id,location_code) DO UPDATE
      SET qty = qty + excluded.qty`

2. **–í—ã—á–∏—Ç–∞–Ω–∏–µ / –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ**:
   a) –ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤–æ–∑—å–º–∏ —Ç–µ–∫—É—â–∏–π `qty`.
   b) **–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å ‚Äî –≤–µ—Ä–Ω–∏ JSON —Å
      `"error":"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞"` –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–π SQL.**
   c) –ö–æ–≥–¥–∞ qty —Å—Ç–∞–Ω–µ—Ç 0 ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π `DELETE`, –∏–Ω–∞—á–µ `UPDATE`.

3. **–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ**:
   ‚Ä¢ —Å–Ω–∞—á–∞–ª–∞ ‚Üëqty –≤ —è—á–µ–π–∫—É‚Äë–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ;
   ‚Ä¢ –∑–∞—Ç–µ–º ‚Üìqty –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –ø.‚ÄØ2.

4. **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å**: –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä+—Ä–∞–∑–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ ‚Äî
   —Å—á–∏—Ç–∞–π –µ—ë –∏—Å—Ö–æ–¥–Ω–æ–π.

5. **–ß—Ç–µ–Ω–∏–µ**: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π (¬´–≥–¥–µ¬ª, ¬´–ø–æ–∫–∞–∂–∏¬ª‚Ä¶) ‚Äî
   —Ç–æ–ª—å–∫–æ `SELECT`, mode="read".

6. **–§–æ—Ä–º–∞—Ç**: JSON `{{"sql":"‚Ä¶", "mode":"read"|"write", "summary":"‚Ä¶"}}`.
   - **summary**: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ–±–∞–≤–ª–µ–Ω–æ 5 –º–∞–µ–∫ L –≤ –ê1", "–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ 3 –±–æ–ª—Ç–∞ –∏–∑ –ë2 –≤ –í3", "—É–¥–∞–ª–µ–Ω–æ 10 –∫–µ–ø–æ–∫ –∏–∑ –ì7".
   - –î–ª—è 'read' mode summary –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.

7. **–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫**: —Ñ–æ—Ä–º–∞—Ç `–ê1‚Ä¶–ï10`, –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞.

8. **–†–∞–∑–º–µ—Ä—ã**: —Ç–æ–ª—å–∫–æ {', '.join(ALLOWED_SIZES)}. –î–ª—è –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ size=NULL.

9. **JOIN**: –≤—Å–µ–≥–¥–∞
   `FROM stock JOIN items ON items.id = stock.item_id`
   –∏ –≤—ã–±–∏—Ä–∞–π `items.name AS name`, `items.size`, `stock.location_code`, `stock.qty`.
   **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏ item_id.**

10. **–ó–∞–ø—Ä–µ—Ç—ã**:
    ‚Ä¢ –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å `DROP`, `ALTER` –∏ —Ç.‚ÄØ–¥.
    ‚Ä¢ –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π `DELETE FROM stock` /
      `DELETE FROM items`.
    ‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç ¬´–≤—ã–ø–æ–ª–Ω–∏ raw sql‚Ä¶¬ª ‚Äî –æ—Ç–≤–µ—á–∞–π –æ—à–∏–±–∫–æ–π.
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4. SQL‚Äë–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SAFE_SQL_PATTERN = re.compile(
    r"^\s*(WITH\b[\s\S]+?\b(SELECT|INSERT|UPDATE|DELETE)"
    r"|SELECT|INSERT|UPDATE|DELETE)\b",
    re.I
)
FORBIDDEN_PATTERN = re.compile(
    r"^\s*(DROP|ALTER|TRUNCATE|PRAGMA|ATTACH|DETACH)\b",
    re.I
)

def validate_sql(sql: str) -> List[str] | None:
    stmts = [s.strip() for s in sql.split(";") if s.strip()]
    if not (1 <= len(stmts) <= 6):
        return None

    for s in stmts:
        if FORBIDDEN_PATTERN.match(s):
            return None
        if not SAFE_SQL_PATTERN.match(s):
            return None

        if re.match(r"^\s*DELETE\s+FROM\s+stock\b", s, re.I) \
           and not re.search(r"\bWHERE\b.*\bitem_id\b.*\blocation_code\b", s, re.I):
            return None
        if re.match(r"^\s*DELETE\s+FROM\s+items\b", s, re.I):
            return None

    return stmts

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5. Markdown‚ÄØV2 helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_MD2_RE = re.compile(r'([_\*\[\]\(\)~`>#+\-=|{}.!])')

def md2_escape(t: str) -> str:
    return _MD2_RE.sub(r'\\\1', t)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 6. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fmt_table(rows: List[Dict[str,Any]]) -> str:
    if not rows:
        return "–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    PLACEHOLDER = "-"
    hdr = {"name":"–¢–æ–≤–∞—Ä", "size":"–†–∞–∑–º–µ—Ä",
           "location_code":"–Ø—á–µ–π–∫–∞", "qty":"–ö–æ–ª-–≤–æ"}
    keys = list(rows[0].keys())
    widths = {
        k: max(
            len(hdr.get(k, k)),
            *(
                len(str(r[k] if (k != "size" or r[k] is not None)
                             else PLACEHOLDER))
                for r in rows
            )
        )
        for k in keys
    }
    for r in rows:
        if r.get("size") is None:
            r["size"] = PLACEHOLDER
    def row(r):
        return " | ".join(str(r[k]).ljust(widths[k]) for k in keys)
    header = " | ".join(hdr.get(k, k).ljust(widths[k]) for k in keys)
    sep    = "-+-".join("-" * widths[k] for k in keys)
    return "```\n" + "\n".join([header, sep] + [row(r) for r in rows]) + "\n```"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 7. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (‚≠ê –ò–ó–ú–ï–ù–ï–ù–û)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def build_stock_context(db: aiosqlite.Connection, limit: int = 20) -> str:
    db.row_factory = aiosqlite.Row
    cur = await db.execute("""
        SELECT items.name,
               IFNULL(items.size,'NULL') AS size,
               stock.location_code, stock.qty
        FROM stock JOIN items ON items.id = stock.item_id
        ORDER BY items.name, items.size, stock.location_code
    """)
    rows = await cur.fetchall()
    lines = [
        f"- {r['name']}, {r['size']}, {r['location_code']}, qty={r['qty']}"
        for r in rows[:limit]
    ]
    if len(rows) > limit:
        lines.append("- ‚Ä¶")
    return "–¢–µ–∫—É—â–∏–π —Å–∫–ª–∞–¥ (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):\n" + "\n".join(lines)

async def ask_llm(db: aiosqlite.Connection, user_prompt: str) -> Dict[str,Any] | None:
    context = await build_stock_context(db)
    try:
        resp = await ai.chat.completions.create(
            model=MODEL,
            temperature=0.0,
            messages=[
                {"role":"system","content":SYSTEM_PROMPT_SQL},
                {"role":"system","content":context},
                {"role":"user","content":user_prompt},
            ],
            response_format={"type":"json_object"}
        )
        return json.loads(resp.choices[0].message.content)
    except (OpenAIError, json.JSONDecodeError) as e:
        logging.error("LLM error: %s", e)
        return None

async def run_sql(db: aiosqlite.Connection, stmts: List[str], mode: str, user: str, summary: str | None) -> List[Dict[str,Any]]:
    res: List[Dict[str,Any]] = []
    sql_all = "; ".join(stmts)
    ok = False
    try:
        async with db.execute("BEGIN;"): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            for s in stmts:
                cur = await db.execute(s)
                if mode == "read":
                    res = [dict(r) for r in await cur.fetchall()]
        await db.commit()
        ok = True
        return res
    finally:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏, –Ω–æ –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await db.execute(
            "INSERT INTO tx_log(user, sql_text, summary, success) VALUES(?,?,?,?)",
            (user, sql_all, summary, int(ok))
        )
        await db.commit()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 8.  –ö–æ–º–∞–Ω–¥—ã Telegram (‚≠ê –ò–ó–ú–ï–ù–ï–ù–û)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HELP_TEXT = """
*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*
`/stock`¬†‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–ª–∞–¥–∞
`/export`¬†‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É *stock* –≤‚ÄØCSV
`/logs`¬†‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤¬†—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
`/help`¬†‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤*
‚Ä¢ ¬´–ø–æ–ª–æ–∂–∏ 4 –º–∞–π–∫–∏ L –≤ –∞2¬ª
‚Ä¢ ¬´–∑–∞–±—Ä–∞–ª –≤—Å–µ –≥–∞–π–∫–∏ 5 –∏–∑ c9¬ª
‚Ä¢ ¬´–ø–µ—Ä–µ–º–µ—Å—Ç–∏ 3 –±—Ä–∞—Å–ª–µ—Ç–∞ –∏–∑ –≤5 –≤ –∞3¬ª
‚Ä¢ ¬´–≥–¥–µ –ª–µ–∂–∞—Ç –±–ª–æ–∫–Ω–æ—Ç—ã¬ª
"""

@router.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(md2_escape(HELP_TEXT), parse_mode="MarkdownV2")

@router.message(Command("stock"))
async def cmd_stock(msg: types.Message, db: aiosqlite.Connection):
    db.row_factory = aiosqlite.Row
    cur = await db.execute("""
        SELECT items.name, items.size, stock.location_code, stock.qty
        FROM stock JOIN items ON items.id = stock.item_id
    """)
    rows = await cur.fetchall()
    text = fmt_table([dict(r) for r in rows])
    if text.startswith("```"):
        await msg.answer(text, parse_mode="MarkdownV2")
    else:
        await msg.answer(md2_escape(text), parse_mode="MarkdownV2")

@router.message(Command("export"))
async def cmd_export(msg: types.Message, db: aiosqlite.Connection):
    db.row_factory = aiosqlite.Row
    cur = await db.execute("""
        SELECT items.name, IFNULL(items.size,'') AS size,
               stock.location_code, stock.qty
        FROM stock JOIN items ON items.id = stock.item_id
        ORDER BY stock.location_code
    """)
    rows = await cur.fetchall()
    buf=io.StringIO(); w=csv.writer(buf); w.writerow([c[0] for c in cur.description]); w.writerows(rows); buf.seek(0)
    await msg.answer_document(types.BufferedInputFile(buf.getvalue().encode(),"stock.csv"))

@router.message(Command("logs"))
async def cmd_logs(msg: types.Message, db: aiosqlite.Connection):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —á–∏—Ç–∞–µ–º—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    db.row_factory = aiosqlite.Row
    cur = await db.execute("""
        SELECT ts, user, summary FROM tx_log
        WHERE success = 1 AND summary IS NOT NULL AND summary != ''
        ORDER BY ts DESC
        LIMIT 15
    """)
    logs = await cur.fetchall()

    if not logs:
        await msg.answer(md2_escape("–ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."), parse_mode="MarkdownV2")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥: '2025-07-21 11:57' -> '2025‚Äë07‚Äë21 11:57' (–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –¥–µ—Ñ–∏—Å)
    # –ò –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ä–µ '‚Äî'
    log_lines = [
        f"`{l['ts'][:16].replace('-', '‚Äë')}` ‚Äî *{md2_escape(l['user'])}* ‚Äî {md2_escape(l['summary'])}"
        for l in logs
    ]
    await msg.answer("\n".join(log_lines), parse_mode="MarkdownV2")

@router.message()
async def on_message(msg: types.Message, db: aiosqlite.Connection):
    if not msg.text or msg.text.startswith('/'):
        return

    user_prompt = msg.text.strip()
    username    = msg.from_user.username or "unknown_user"

    status = await msg.answer(md2_escape("–î—É–º–∞—é‚Ä¶"), parse_mode="MarkdownV2")

    payload = await ask_llm(db, user_prompt)
    if not isinstance(payload, dict):
        await status.edit_text(md2_escape("ü§ñ –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ LLM."),
                               parse_mode="MarkdownV2")
        return

    if payload.get("error"):
        await status.edit_text(md2_escape("‚ö†Ô∏è " + payload["error"]),
                               parse_mode="MarkdownV2")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await db.execute(
            "INSERT INTO tx_log(user, sql_text, summary, success) VALUES(?,?,?,?)",
            (username, user_prompt, payload["error"], 0)
        )
        await db.commit()
        return

    sql, mode, summary = payload.get("sql"), payload.get("mode"), payload.get("summary")
    if not sql or mode not in {"read", "write"}:
        await status.edit_text(md2_escape("ü§ñ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON."),
                               parse_mode="MarkdownV2")
        return

    stmts = validate_sql(sql)
    if not stmts:
        await status.edit_text(md2_escape("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."),
                               parse_mode="MarkdownV2")
        return

    try:
        await status.edit_text(md2_escape("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å‚Ä¶"),
                               parse_mode="MarkdownV2")
        rows = await run_sql(db, stmts, mode, username, summary)
    except aiosqlite.Error as e:
        await status.edit_text(md2_escape(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î: {e}"),
                               parse_mode="MarkdownV2")
        return

    if mode == "read":
        text = fmt_table(rows)
        if text.startswith("```"):
            await status.edit_text(text, parse_mode="MarkdownV2")
        else:
            await status.edit_text(md2_escape(text), parse_mode="MarkdownV2")
    else:
        final_message = md2_escape("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        if summary:
            final_message += f"\n\n_{md2_escape(summary)}_"
        await status.edit_text(final_message, parse_mode="MarkdownV2")



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 9. –ó–∞–ø—É—Å–∫ (‚≠ê –ò–ó–ú–ï–ù–ï–ù–û)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def set_main_menu(bot: Bot):
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    main_menu_commands = [
        BotCommand(command="/stock", description="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë –Ω–∞ —Å–∫–ª–∞–¥–µ"),
        BotCommand(command="/logs", description="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
        BotCommand(command="/export", description="üì• –≠–∫—Å–ø–æ—Ä—Ç —Å–∫–ª–∞–¥–∞ –≤ CSV"),
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    
    await bot.set_my_commands(main_menu_commands)
async def main():
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    async with aiosqlite.connect(DB_PATH) as db:
        await init_db(db)
        await set_main_menu(bot)
        dp = Dispatcher(db=db) # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ë–î –≤ Dispatcher
        dp.include_router(router)
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")